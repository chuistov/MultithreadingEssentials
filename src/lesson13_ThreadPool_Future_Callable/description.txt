Пул потоков - это множество объектов Thread, к-е мы используем для выполнения задач.
Создание потока - дорогая операция.
У потока есть очередь задач.
Когда поток завершает выполнение текущей задачи, он переключается на следующую.

Для создания пула потоков применяется утилитный класс Executors.
1) Executors.newSingleThreadExecutor() - создается пул с единственным потоком.
2) Executors.newFixedThreadPool(5) - создается пул с указанным количеством потоков.
3) Executors.newCachedThreadPool() - создается столько потоков, сколько есть задач.
Столько же потоков остается в будущем, даже если придет еще больше задач.
4) Executors.newScheduledThreadPool(5) - можно выполнять задачи с определенной периодичностью.
Встречается реже, удобен для своего применения.
Есть методы schedule...() - можно задавать задержку выполнения
5) Executors.newWorkStealingPool() - создается пул потоков на основании ForkJoinPool.
Размер пула такой, какой позволяет количество процессоров (Runtime.getRuntime().availableProcessors()).
Оптимальное количество потоков, определяется автоматически.

Все пулы потоков (кроме newScheduledThreadPool) работаю одинаков.

Методы пула потоков (экземпляра класса ExecutorService):
1) submit() - выполняет задачу, аргумент - Runnable или Callable.
Возвращает объект Future.

Callable идентичен Runnable за исключением того, что он возвращает результат указанного типа (Callable<T>).
Еще Callable пробрасывает исключение.

Если свободного потока нет, задача будет ожидать высвобождения потока.
2) execute() - выполнение задачи, если не нужен возвращаемый результат.
3) shutdownNow() и shutdown() - завершение пула потоков.
shutdown() ждет выполнение всех отправленных задач,
а shutdownNow() завершает все потоки и возвращает невыполненные задачи.
4) awaitTermination() - время ожидания (количество хроноюнитов и единица времени).
shutdown() сработает либо после выполнения всех задач, либо по истечении этого времени.

Что такое Future?
Это объект с результатом выполнения задачи, который будет получен в будущем.
Получение результата - метод get(). Можно указать таймаут получения результата. Блокирующий метод.
Future позволяет запускать задачи на выполнение, НЕ БЛОКИРУЯ основной поток.

CompletableFuture.runAsync(Runnable) - асинхронный запуск задач.
Если не указать ThreadPool, будет вызван дефолтный.

CompletableFuture.invokeAll - выполнение списка задач, возвращает список Future.

